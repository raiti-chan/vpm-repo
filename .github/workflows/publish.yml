on:
  workflow_dispatch:

permissions: 
  id-token: write
  pages: write
  contents: read

concurrency: 
  group: "pages"
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy repository manifest
    runs-on: ubuntu-latest
    environment: 
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Generate vpm.json
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const fs = require('fs')
              const path = require('path')
              const packageDir = 'packages'

              const vpmJson = fs.readFileSync('vpm-temp.json')
              const vpm = JSON.parse(vpmJson)
              const repoUrl = vpm.url
              core.info('Repo URL : ' + repoUrl)

              const dirs = fs.readdirSync(packageDir).filter((file) => {
                return fs.statSync(path.join(packageDir, file)).isDirectory()
              })

              var packages = {}

              dirs.forEach((dir) => {
                const targetDir = path.join(packageDir, dir)
                core.info('package: ' + targetDir)
                
                var versions = {}
                const files = fs.readdirSync(targetDir)
                var name = ''
                files.forEach((file) => {
                  const filePath = path.join(targetDir, file)
                  core.info('version: ' + filePath)

                  const jsonString = fs.readFileSync(filePath)
                  const package = JSON.parse(jsonString)
                  const version = package.version
                  name = package.name
                  package.repo = repoUrl
                  versions[version] = package
                })

                if (name) {
                  packages[name] = {versions: versions}
                }
              })

              vpm.packages = packages
              const dstVpmJson = JSON.stringify(vpm, null, 2)
              core.info(dstVpmJson)
            } catch(err) {
              core.error("Error while reading or parsing the JSON")
              core.setFailed(err)
            }
      
